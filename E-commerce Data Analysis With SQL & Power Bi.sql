create database ecommerce_data_analysis;

use ecommerce_data_analysis;


-- Total Data Files

select *from customers
select *from order_items
select *from orders
select *from payments
select *from products



-- Data Cleaning & Preparation

alter table customers alter column regist_date date
alter table orders alter column order_id float
alter table payments alter column amount_paid float
alter table order_items alter column quantity float
alter table order_items alter column total_price float
alter table products alter column stock_quantity float
alter table orders alter column customer_id float
alter table orders alter column order_date date

exec sp_rename 'dbo.customers.name' , 'names', 'column'

update products set category='Clothes' where category='Roupas'
update products set category='Foods' where category='Alimentos'
update products set category='Books' where category='Livros'
update products set category='Electronics' where category='Eletr√nicos'

update orders set order_status='Paid' where order_status='Pago'
update orders set order_status='Pending' where order_status='Pendente'
update orders set order_status='Cancelled' where order_status='Cancelado'
update orders set order_status='Shipped' where order_status='Enviado'
update orders set order_status='Delivered' where order_status='Entregue'
update orders set order_date='2024-01-29' where order_date='1900-01-01'

update payments set payment_method='Instant Payment' where payment_method='Pix'
update payments set payment_method='Bank Slip' where payment_method='Boleto'
update payments set payment_method='Credit Card' where payment_method='Cart√£o de Cr√©dito'
update payments set payment_method='Other' where payment_method=''
update orders set order_status='Not Specified' where order_status=''
update products set category='Not Specified' where category=''
update customers set regist_date= '2019-02-28' where regist_date is null
update customers set names= 'Unknown' where names is null




-- Data Analysis


-- Calculate the distribution of payment methods used by customers

select 
payment_method as 'Payment Method',
count(customer_id) as 'Total Counts'
from payments join orders
on payments.order_id=orders.order_id
group by payment_method
order by 'Total Counts' desc


-- Analyze the distribution of order status

select 
order_status as 'Order Status',
count(order_id) as 'Total Counts'
from orders
group by order_status
order by 'Total Counts' desc


-- Calculate the total revenue generated by each payment method

select
payment_method as 'Payment Method',
round(sum(amount_paid),2) as 'Total Revenue'
from payments
group by payment_method
order by 'Total Revenue' desc


-- Calculate the total sales revenue for each products

select top 10
product_name as 'Products Name',
round(sum(total_price),2) as 'Total Revenue'
from products join order_items
on products.product_id=order_items.product_id
group by product_name
order by 'Total Revenue' desc


-- Identitfy the products with the highest demand based on quantity ordered

select top 10
product_name as 'Products Name',
count(quantity) 'Total Orders'
from products join order_items
on products.product_id=order_items.product_id
group by product_name
order by 'Total Orders' desc



-- identify the stock level of which products is low

select top 10
product_name as 'Products Name',
stock_quantity as 'Stock Quantity'
from products
order by 'Stock Quantity' desc


--Analyze the sales by product category

select
category as 'Category',
round(sum(total_price),2) as 'Revenue'
from products join order_items
on products.product_id=order_items.product_id
group by category
order by 'Revenue' desc


-- Analyze how many customer register in each year

select
year(regist_date) as 'Year',
count(customer_id) as 'Register'
from customers 
group by year(regist_date)
order by 'Year'


-- Determine how many orders each customers has placed

select top 10
names as 'Customers Name',
count(order_id) as 'Orders Placed'
from customers join orders
on customers.customer_id=orders.customer_id
group by names
order by 'Orders Placed' desc



-- identify the top 10 customers based on total spending

select top 10
names as 'Customers Name',
round(sum(total_price),2) as 'Total Spends'
from customers join orders 
on customers.customer_id=orders.customer_id
join order_items
on orders.order_id=order_items.order_id
group by names
order by 'Total Spends' desc


-- Estimate the lifetime value of customers based on their purchase history

select top 10
names as 'Customer Name',
round(sum(total_price),2) as 'Liftime Value'
from customers join orders
on customers.customer_id=orders.customer_id
join order_items 
on
orders.order_id=order_items.order_id
group by names 
order by 'Liftime Value' desc


-- Analyze the rate at which orders are completed versus 
-- those are canceled or pending

select
order_status,
count(order_id) as 'Status Count',
convert (decimal(10,0),round(count(order_id) * 100.0 / 
(select count(order_id) from orders),1)) as 'Status Percentage'
from orders
group by order_status



-- identify orders that have been pending for a long period

select top 8
order_id,
datediff(day,order_date,GETDATE()) as 'Pending Days'
from orders
where order_status='Pending'
group by  order_id , datediff(day,order_date,GETDATE()) 
order by 'Pending Days' desc



